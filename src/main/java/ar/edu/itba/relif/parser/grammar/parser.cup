package ar.edu.itba.relif.parser;
import ar.edu.itba.relif.util.*;
import ar.edu.itba.relif.parser.ast.*;
import ar.edu.itba.relif.parser.ast.operator.*;
import java_cup.runtime.*;
import java.util.*;
import java.util.Collections;


parser code {:
    static class ScopeBuilder {
        Pair<Integer, Boolean> identities, symmetrics, asymmetrics;
        boolean doneId, doneSym, doneAsym;

        public ScopeBuilder() {
            identities = Scope.DEFAULT.getIdentities();
            symmetrics = Scope.DEFAULT.getSymmetrics();
            asymmetrics = Scope.DEFAULT.getAsymmetrics();
        }

        public ScopeBuilder setDefaults(int i) {
            if(!doneId) {
                identities = Pair.of(i, false);
            }
            if(!doneSym) {
                  symmetrics = Pair.of(i, false);
            }

            if(!doneAsym) {
                 asymmetrics = Pair.of(i, false);
            }
            return this;
        }
        public ScopeBuilder identities(int i, boolean exactly) {
            if (doneId) { throw new IllegalStateException("Did id"); }
            doneId = true;
            identities = Pair.of(i, exactly);
            return this;
        }

        public ScopeBuilder symmetrics(int i, boolean exactly) {
                    if (doneSym) { throw new IllegalStateException("Did sym"); }
                    doneSym = true;
                    symmetrics = Pair.of(i, exactly);
                    return this;
                }

        public ScopeBuilder asymmetrics(int i, boolean exactly) {
                            if (doneAsym) { throw new IllegalStateException("Did asym"); }
                            doneAsym = true;
                            asymmetrics = Pair.of(i, exactly);
                            return this;
                        }

        public ScopeBuilder set(int type, int i, boolean exactly) {
            if (type == 0) {
                 return identities(i, exactly);
            } else if (type == 1) {
                return symmetrics(i, exactly);
            } else if (type == 2) {
                return asymmetrics(i, exactly);
            }

            throw new IllegalStateException("Unreachable");

        }
        public Scope build() {
            return new Scope(identities, symmetrics, asymmetrics);
        }

    }
:}

terminal    REL,
            ATOM,
            EQUALS,
            PLUS,
            MINUS,
            COMPOSE,
            CONVERSE,
            INTERSECTION,
            COMMA,
            IN,
            NO,
            SOME,
            IDEN,
            UNIV,
            RUN,
            CHECK,
            NOT,
            AND,
            OR,
            IMPLIES,
            IFF,
            OPENPAREN,
            CLOSEPAREN,
            NEWLINE,
            FOR,
            SYMMETRIC,
            IDENTITY,
            ASYMMETRIC,
            DEFAULT,
            BUT,
            EXACTLY,
            LBRACKET,
            RBRACKET;

terminal String IDENTIFIER;
terminal Integer NUMBER;

non terminal Specification              spec;
non terminal LinkedList<Statement>      lines;
non terminal Command                    command;
non terminal Statement                  line;
non terminal Declaration                decl;
non terminal Statement                  fact;
non terminal LinkedList<String>         identifiers;
non terminal Formula                    formula;
non terminal BinaryLogicalOp            bin_logical_op;
non terminal SetOperator                set_op;
non terminal MultiplicityFact.Multiplicity   multiplicity_constraint;
non terminal MultiplicityFact           multiplicity_fact;
non terminal RelationExpression         rel_expr;
non terminal ScopeBuilder               scope;
non terminal Integer                    scope_type;
non terminal CommandType                command_type;
non terminal Optional<Statement>        command_target;

precedence left IFF, IMPLIES;
precedence left OR;
precedence left AND;
precedence left PLUS, MINUS;
precedence left INTERSECTION;
precedence left COMPOSE;
precedence left CONVERSE;

spec ::= lines:ls command:c {: RESULT = new Specification(ls, c); :}
        | lines:ls {: RESULT = new Specification(ls, Command.DEFAULT); :}
        | command:c {: RESULT = new Specification(Collections.emptyList(), c); :}
        | /* empty */ {: RESULT = new Specification(Collections.emptyList(), Command.DEFAULT );:}
        ;

lines ::= line:l {: RESULT = new LinkedList<Statement>(); RESULT.add(l); :}
            | line:l lines:ls {: RESULT = ls; RESULT.addFirst(l); :}
            ;

line ::= decl:d {:  RESULT = d; :}
        | fact:f {: RESULT = f; :}
        ;
    

decl ::= REL identifiers:is {: RESULT = new Declaration(is, false);  :}
        | ATOM identifiers:is {: RESULT = new Declaration(is, true); :}
        ;

identifiers ::= IDENTIFIER:i {: RESULT = new LinkedList<String>();
                                RESULT.add(i); :}
            | IDENTIFIER:i COMMA identifiers:is
                                {:
                                    is.addFirst(i);
                                    RESULT = is;
                                :}
            ;


fact ::=    formula:f {: RESULT = f; :}
            ;


formula ::= rel_expr:l set_op:op rel_expr:r {: RESULT = new SetFormula(l,op,r);  :}
        | NOT formula:f {: RESULT = new NotFormula(f); :}
        | formula:l bin_logical_op:o formula:r {: RESULT = new BinaryFormula(l,o,r); :}
        | OPENPAREN formula:f CLOSEPAREN {: RESULT = f; :}
        | multiplicity_fact:f {: RESULT = f; :}
        ;

bin_logical_op ::=  AND         {: RESULT = BinaryLogicalOp.AND; :}
                |   OR          {: RESULT = BinaryLogicalOp.OR;  :}
                |   IMPLIES     {: RESULT = BinaryLogicalOp.IMPLIES; :}
                |   IFF         {: RESULT = BinaryLogicalOp.IFF; :}
                ;

set_op ::=   IN  {: RESULT = SetOperator.IN; :}
            | NOT IN {: RESULT = SetOperator.NOT_IN; :}
            | EQUALS {: RESULT = SetOperator.EQUALS; :}
            | NOT EQUALS {: RESULT = SetOperator.NOT_EQUALS; :}
            ;


multiplicity_fact ::= multiplicity_constraint:c rel_expr:r {: RESULT = new MultiplicityFact(c, r); :}
                  ;


multiplicity_constraint ::= NO {: RESULT = MultiplicityFact.Multiplicity.NO; :}
                        |   SOME {: RESULT = MultiplicityFact.Multiplicity.SOME; :}
                        ;

rel_expr ::= IDEN                                       {: RESULT = Rel.IDEN; :}
            | UNIV                                      {: RESULT = Rel.UNIV; :}
            | IDENTIFIER:i                              {: RESULT = new Rel(i); :}
            | rel_expr:r1 PLUS rel_expr:r2              {: RESULT = new BinaryRelationExpr(r1, BinaryRelationOp.PLUS, r2); :}
            | rel_expr:r1 MINUS rel_expr:r2             {: RESULT = new BinaryRelationExpr(r1, BinaryRelationOp.MINUS, r2); :}
            | rel_expr:r1 COMPOSE rel_expr:r2           {: RESULT = new BinaryRelationExpr(r1, BinaryRelationOp.COMPOSE, r2); :}
            | rel_expr:r1 INTERSECTION rel_expr:r2      {: RESULT = new BinaryRelationExpr(r1, BinaryRelationOp.INTERSECTION, r2); :}
            | MINUS rel_expr:r                          {: RESULT = new UnaryRelationExpr(UnaryRelationOp.UNARY_MINUS, r); :}
            | CONVERSE rel_expr:r                       {: RESULT = new UnaryRelationExpr(UnaryRelationOp.CONVERSE, r); :}
            | OPENPAREN rel_expr:r CLOSEPAREN           {: RESULT = r; :}
            ;



command ::= command_type:t command_target:ct {: RESULT = new Command(t, ct, Scope.DEFAULT); :}
            | command_type:t command_target:ct FOR scope:sb {: RESULT = new Command(t, ct, sb.build()); :}
            | command_type:t command_target:ct FOR NUMBER:i {: RESULT = new Command(t, ct, new ScopeBuilder().setDefaults(i).build()); :}
            | command_type:t command_target:ct FOR NUMBER:i BUT scope:sb {: RESULT = new Command(t, ct, sb.setDefaults(i).build()); :}
            | command_type:t command_target:ct FOR DEFAULT BUT scope:sb {: RESULT = new Command(t, ct, sb.build()); :}
            | command_type:t command_target:ct FOR DEFAULT {: RESULT = new Command(t, ct, Scope.DEFAULT); :}
            ;

command_target ::= LBRACKET fact:f RBRACKET {: RESULT = Optional.of(f); :}
                | LBRACKET RBRACKET {: RESULT = Optional.empty(); :}
                ;

command_type ::= RUN {: RESULT = CommandType.RUN; :}
             |   CHECK {: RESULT = CommandType.CHECK; :}
             ;


scope ::= NUMBER:i scope_type:t {: RESULT = new ScopeBuilder().set(t, i, false); :}
          | EXACTLY NUMBER:i scope_type:t {: RESULT = new ScopeBuilder().set(t, i, true); :}
          | NUMBER:i scope_type:t COMMA scope:sb {: RESULT = sb.set(t, i, false); :}
          | EXACTLY NUMBER:i scope_type:t COMMA scope:sb {: RESULT = sb.set(t, i, true); :}
          ;

scope_type ::= IDENTITY     {: RESULT = 0; :}
            |  SYMMETRIC    {: RESULT = 1; :}
            |  ASYMMETRIC   {: RESULT = 2; :}
            ;