
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ar.edu.itba.relif.parser;

import ar.edu.itba.relif.util.*;
import ar.edu.itba.relif.parser.ast.*;
import ar.edu.itba.relif.parser.ast.operator.*;
import java_cup.runtime.*;
import java.util.*;
import java.util.Collections;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\002\000\002\003\003" +
    "\000\002\003\004\000\002\005\003\000\002\005\003\000" +
    "\002\006\004\000\002\006\004\000\002\010\003\000\002" +
    "\010\005\000\002\007\003\000\002\011\005\000\002\011" +
    "\004\000\002\011\005\000\002\011\005\000\002\011\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\013\003\000\002\013\003\000\002" +
    "\015\004\000\002\014\003\000\002\014\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\004\000\002\016\005\000\002\004\004\000\002" +
    "\004\006\000\002\004\006\000\002\004\010\000\002\004" +
    "\010\000\002\022\005\000\002\022\004\000\002\021\003" +
    "\000\002\021\003\000\002\017\004\000\002\017\005\000" +
    "\002\017\006\000\002\017\007\000\002\020\003\000\002" +
    "\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\034\002\ufffd\004\013\005\024\012\016\016" +
    "\032\017\030\020\021\021\031\022\027\023\025\024\015" +
    "\031\010\045\020\001\002\000\046\002\ufff4\004\ufff4\005" +
    "\ufff4\012\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\063\026\066\027\062\030\065\031" +
    "\ufff4\044\ufff4\045\ufff4\001\002\000\010\002\uffff\022\027" +
    "\023\025\001\002\000\034\002\ufff9\004\ufff9\005\ufff9\012" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9" +
    "\024\ufff9\031\ufff9\045\ufff9\001\002\000\014\012\016\020" +
    "\021\021\031\031\047\045\020\001\002\000\022\012\016" +
    "\016\032\017\030\020\021\021\031\024\015\031\010\045" +
    "\020\001\002\000\034\002\ufffa\004\ufffa\005\ufffa\012\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\031\ufffa\045\ufffa\001\002\000\004\002\ufffe\001\002" +
    "\000\004\045\035\001\002\000\004\043\071\001\002\000" +
    "\022\012\016\016\032\017\030\020\021\021\031\024\015" +
    "\031\010\045\020\001\002\000\014\012\016\020\021\021" +
    "\031\031\047\045\020\001\002\000\050\002\uffef\004\uffef" +
    "\005\uffef\012\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\044\uffef\045\uffef\001\002\000\064\002" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\044\uffe3\045\uffe3\001\002\000" +
    "\064\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\044\uffe5\045\uffe5\001" +
    "\002\000\004\002\057\001\002\000\016\006\042\007\043" +
    "\010\046\011\041\013\045\015\040\001\002\000\004\045" +
    "\035\001\002\000\004\043\uffd4\001\002\000\034\002\ufffc" +
    "\004\013\005\024\012\016\016\032\017\030\020\021\021" +
    "\031\022\ufffc\023\ufffc\024\015\031\010\045\020\001\002" +
    "\000\004\043\uffd5\001\002\000\014\012\uffe6\020\uffe6\021" +
    "\uffe6\031\uffe6\045\uffe6\001\002\000\064\002\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\044\uffe4\045\uffe4\001\002\000\014\012\uffe7" +
    "\020\uffe7\021\uffe7\031\uffe7\045\uffe7\001\002\000\010\002" +
    "\ufffb\022\ufffb\023\ufffb\001\002\000\034\002\ufff7\004\ufff7" +
    "\005\ufff7\012\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\031\ufff7\045\ufff7\001\002\000\036" +
    "\002\ufff6\004\ufff6\005\ufff6\012\ufff6\014\036\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\031\ufff6" +
    "\045\ufff6\001\002\000\004\045\035\001\002\000\034\002" +
    "\ufff5\004\ufff5\005\ufff5\012\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\024\ufff5\031\ufff5\045\ufff5\001" +
    "\002\000\014\012\uffea\020\uffea\021\uffea\031\uffea\045\uffea" +
    "\001\002\000\014\012\016\020\021\021\031\031\047\045" +
    "\020\001\002\000\014\012\uffe9\020\uffe9\021\uffe9\031\uffe9" +
    "\045\uffe9\001\002\000\014\012\016\020\021\021\031\031" +
    "\047\045\020\001\002\000\014\012\016\020\021\021\031" +
    "\031\047\045\020\001\002\000\014\012\016\020\021\021" +
    "\031\031\047\045\020\001\002\000\014\012\016\020\021" +
    "\021\031\031\047\045\020\001\002\000\014\012\016\020" +
    "\021\021\031\031\047\045\020\001\002\000\064\002\uffe1" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\041\012" +
    "\uffe1\013\045\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\044\uffe1\045\uffe1\001\002\000\014" +
    "\007\043\010\046\011\041\013\045\032\052\001\002\000" +
    "\064\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\044\uffdd\045\uffdd\001" +
    "\002\000\064\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\041\012\uffdf\013\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\044\uffdf\045" +
    "\uffdf\001\002\000\060\002\ufff3\004\ufff3\005\ufff3\007\043" +
    "\010\046\011\041\012\ufff3\013\045\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\044\ufff3\045\ufff3\001" +
    "\002\000\064\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\041\012\uffe2\013\045\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\044\uffe2\045" +
    "\uffe2\001\002\000\064\002\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\044" +
    "\uffe0\045\uffe0\001\002\000\004\002\000\001\002\000\064" +
    "\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\044\uffde\045\uffde\001\002" +
    "\000\050\002\ufff2\004\ufff2\005\ufff2\012\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\063" +
    "\026\066\027\062\030\065\031\ufff2\032\ufff2\044\ufff2\045" +
    "\ufff2\001\002\000\022\012\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\024\uffec\031\uffec\045\uffec\001\002\000\022\012" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\024\uffee\031\uffee" +
    "\045\uffee\001\002\000\022\012\016\016\032\017\030\020" +
    "\021\021\031\024\015\031\010\045\020\001\002\000\022" +
    "\012\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\024\uffeb\031" +
    "\uffeb\045\uffeb\001\002\000\022\012\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\024\uffed\031\uffed\045\uffed\001\002\000" +
    "\050\002\ufff1\004\ufff1\005\ufff1\012\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\063\026" +
    "\066\027\062\030\065\031\ufff1\032\ufff1\044\ufff1\045\ufff1" +
    "\001\002\000\006\002\uffdc\034\075\001\002\000\024\012" +
    "\016\016\032\017\030\020\021\021\031\024\015\031\010" +
    "\044\072\045\020\001\002\000\006\002\uffd6\034\uffd6\001" +
    "\002\000\004\044\074\001\002\000\006\002\uffd7\034\uffd7" +
    "\001\002\000\010\040\076\042\077\046\101\001\002\000" +
    "\004\041\117\001\002\000\004\046\113\001\002\000\004" +
    "\002\uffdb\001\002\000\014\002\uffda\035\105\036\102\037" +
    "\104\041\106\001\002\000\006\002\uffcf\014\uffcf\001\002" +
    "\000\006\002\uffd3\014\111\001\002\000\006\002\uffcd\014" +
    "\uffcd\001\002\000\006\002\uffce\014\uffce\001\002\000\006" +
    "\042\077\046\110\001\002\000\004\002\uffd9\001\002\000" +
    "\010\035\105\036\102\037\104\001\002\000\006\042\077" +
    "\046\110\001\002\000\004\002\uffd1\001\002\000\010\035" +
    "\105\036\102\037\104\001\002\000\006\002\uffd2\014\115" +
    "\001\002\000\006\042\077\046\110\001\002\000\004\002" +
    "\uffd0\001\002\000\006\042\077\046\110\001\002\000\004" +
    "\002\uffd8\001\002\000\034\002\ufff8\004\ufff8\005\ufff8\012" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\031\ufff8\045\ufff8\001\002\000\014\025\063\026" +
    "\066\027\062\030\065\032\124\001\002\000\020\006\042" +
    "\007\043\010\046\011\041\013\045\015\040\032\052\001" +
    "\002\000\050\002\ufff0\004\ufff0\005\ufff0\012\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\044\ufff0" +
    "\045\ufff0\001\002\000\060\002\uffe8\004\uffe8\005\uffe8\007" +
    "\043\010\046\011\041\012\uffe8\013\045\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\044\uffe8\045\uffe8" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\030\002\021\003\004\004\011\005\025\006" +
    "\010\007\005\011\003\014\006\015\016\016\022\021\013" +
    "\001\001\000\004\012\063\001\001\000\006\004\125\021" +
    "\013\001\001\000\002\001\001\000\004\016\124\001\001" +
    "\000\012\011\121\014\006\015\016\016\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\120\001\001" +
    "\000\004\022\067\001\001\000\012\011\060\014\006\015" +
    "\016\016\022\001\001\000\004\016\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\043\001\001\000\004\010\033\001\001" +
    "\000\002\001\001\000\022\003\032\005\025\006\010\007" +
    "\005\011\003\014\006\015\016\016\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\055\001\001\000\002\001\001\000\004" +
    "\016\054\001\001\000\004\016\053\001\001\000\004\016" +
    "\052\001\001\000\004\016\047\001\001\000\004\016\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\066\014\006\015\016\016\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\063\001\001" +
    "\000\002\001\001\000\014\007\072\011\003\014\006\015" +
    "\016\016\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\106\001\001\000\002" +
    "\001\001\000\004\020\102\001\001\000\004\017\111\001" +
    "\001\000\002\001\001\000\004\020\113\001\001\000\002" +
    "\001\001\000\004\017\115\001\001\000\002\001\001\000" +
    "\004\017\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\063\001\001\000\004\013\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    static class ScopeBuilder {
        Pair<Integer, Boolean> identities, symmetrics, asymmetrics;
        boolean doneId, doneSym, doneAsym;

        public ScopeBuilder() {
            identities = Scope.DEFAULT.getIdentities();
            symmetrics = Scope.DEFAULT.getSymmetrics();
            asymmetrics = Scope.DEFAULT.getAsymmetrics();
        }

        public ScopeBuilder setDefaults(int i) {
            if(!doneId) {
                identities = Pair.of(i, false);
            }
            if(!doneSym) {
                  symmetrics = Pair.of(i, false);
            }

            if(!doneAsym) {
                 asymmetrics = Pair.of(i, false);
            }
            return this;
        }
        public ScopeBuilder identities(int i, boolean exactly) {
            if (doneId) { throw new IllegalStateException("Did id"); }
            doneId = true;
            identities = Pair.of(i, exactly);
            return this;
        }

        public ScopeBuilder symmetrics(int i, boolean exactly) {
                    if (doneSym) { throw new IllegalStateException("Did sym"); }
                    doneSym = true;
                    symmetrics = Pair.of(i, exactly);
                    return this;
                }

        public ScopeBuilder asymmetrics(int i, boolean exactly) {
                            if (doneAsym) { throw new IllegalStateException("Did asym"); }
                            doneAsym = true;
                            asymmetrics = Pair.of(i, exactly);
                            return this;
                        }

        public ScopeBuilder set(int type, int i, boolean exactly) {
            if (type == 0) {
                 return identities(i, exactly);
            } else if (type == 1) {
                return symmetrics(i, exactly);
            } else if (type == 2) {
                return asymmetrics(i, exactly);
            }

            throw new IllegalStateException("Unreachable");

        }
        public Scope build() {
            return new Scope(identities, symmetrics, asymmetrics);
        }

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // spec ::= lines command 
            {
              Specification RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Statement> ls = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Specification(ls, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("spec",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= spec EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Specification start_val = (Specification)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= lines 
            {
              Specification RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Statement> ls = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Specification(ls, Command.DEFAULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("spec",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // spec ::= command 
            {
              Specification RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Specification(Collections.emptyList(), c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("spec",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // spec ::= 
            {
              Specification RESULT =null;
		 RESULT = new Specification(Collections.emptyList(), Command.DEFAULT );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("spec",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lines ::= line 
            {
              LinkedList<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement l = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Statement>(); RESULT.add(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lines",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lines ::= line lines 
            {
              LinkedList<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement l = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Statement> ls = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ls; RESULT.addFirst(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lines",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // line ::= decl 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("line",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // line ::= fact 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement f = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("line",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= REL identifiers 
            {
              Declaration RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> is = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaration(is, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl ::= ATOM identifiers 
            {
              Declaration RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> is = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaration(is, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identifiers ::= IDENTIFIER 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<String>();
                                RESULT.add(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identifiers ::= IDENTIFIER COMMA identifiers 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> is = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    is.addFirst(i);
                                    RESULT = is;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fact ::= formula 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fact",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formula ::= rel_expr set_op rel_expr 
            {
              Formula RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RelationExpression l = (RelationExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetOperator op = (SetOperator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelationExpression r = (RelationExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SetFormula(l,op,r);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formula ::= NOT formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotFormula(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formula ::= formula bin_logical_op formula 
            {
              Formula RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula l = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinaryLogicalOp o = (BinaryLogicalOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula r = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryFormula(l,o,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formula ::= OPENPAREN formula CLOSEPAREN 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formula ::= multiplicity_fact 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultiplicityFact f = (MultiplicityFact)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bin_logical_op ::= AND 
            {
              BinaryLogicalOp RESULT =null;
		 RESULT = BinaryLogicalOp.AND; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_logical_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bin_logical_op ::= OR 
            {
              BinaryLogicalOp RESULT =null;
		 RESULT = BinaryLogicalOp.OR;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_logical_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bin_logical_op ::= IMPLIES 
            {
              BinaryLogicalOp RESULT =null;
		 RESULT = BinaryLogicalOp.IMPLIES; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_logical_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bin_logical_op ::= IFF 
            {
              BinaryLogicalOp RESULT =null;
		 RESULT = BinaryLogicalOp.IFF; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_logical_op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // set_op ::= IN 
            {
              SetOperator RESULT =null;
		 RESULT = SetOperator.IN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // set_op ::= EQUALS 
            {
              SetOperator RESULT =null;
		 RESULT = SetOperator.EQUALS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // multiplicity_fact ::= multiplicity_constraint rel_expr 
            {
              MultiplicityFact RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MultiplicityFact.Multiplicity c = (MultiplicityFact.Multiplicity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelationExpression r = (RelationExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultiplicityFact(c, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicity_fact",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // multiplicity_constraint ::= NO 
            {
              MultiplicityFact.Multiplicity RESULT =null;
		 RESULT = MultiplicityFact.Multiplicity.NO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicity_constraint",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // multiplicity_constraint ::= SOME 
            {
              MultiplicityFact.Multiplicity RESULT =null;
		 RESULT = MultiplicityFact.Multiplicity.SOME; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicity_constraint",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rel_expr ::= IDEN 
            {
              RelationExpression RESULT =null;
		 RESULT = Rel.IDEN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rel_expr ::= UNIV 
            {
              RelationExpression RESULT =null;
		 RESULT = Rel.UNIV; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rel_expr ::= IDENTIFIER 
            {
              RelationExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Rel(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rel_expr ::= rel_expr PLUS rel_expr 
            {
              RelationExpression RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RelationExpression r1 = (RelationExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelationExpression r2 = (RelationExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryRelationExpr(r1, BinaryRelationOp.PLUS, r2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rel_expr ::= rel_expr MINUS rel_expr 
            {
              RelationExpression RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RelationExpression r1 = (RelationExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelationExpression r2 = (RelationExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryRelationExpr(r1, BinaryRelationOp.MINUS, r2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rel_expr ::= rel_expr COMPOSE rel_expr 
            {
              RelationExpression RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RelationExpression r1 = (RelationExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelationExpression r2 = (RelationExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryRelationExpr(r1, BinaryRelationOp.COMPOSE, r2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rel_expr ::= rel_expr INTERSECTION rel_expr 
            {
              RelationExpression RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RelationExpression r1 = (RelationExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelationExpression r2 = (RelationExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryRelationExpr(r1, BinaryRelationOp.INTERSECTION, r2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rel_expr ::= CONVERSE rel_expr 
            {
              RelationExpression RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelationExpression r = (RelationExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryRelationExpr(UnaryRelationOp.CONVERSE, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rel_expr ::= OPENPAREN rel_expr CLOSEPAREN 
            {
              RelationExpression RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RelationExpression r = (RelationExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // command ::= command_type command_target 
            {
              Command RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CommandType t = (CommandType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optional<Statement> ct = (Optional<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Command(t, ct, Scope.DEFAULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // command ::= command_type command_target FOR scope 
            {
              Command RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CommandType t = (CommandType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Optional<Statement> ct = (Optional<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ScopeBuilder sb = (ScopeBuilder)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Command(t, ct, sb.build()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // command ::= command_type command_target FOR NUMBER 
            {
              Command RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CommandType t = (CommandType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Optional<Statement> ct = (Optional<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Command(t, ct, new ScopeBuilder().setDefaults(i).build()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // command ::= command_type command_target FOR NUMBER BUT scope 
            {
              Command RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		CommandType t = (CommandType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Optional<Statement> ct = (Optional<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ScopeBuilder sb = (ScopeBuilder)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Command(t, ct, sb.setDefaults(i).build()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // command ::= command_type command_target FOR DEFAULT BUT scope 
            {
              Command RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		CommandType t = (CommandType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Optional<Statement> ct = (Optional<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ScopeBuilder sb = (ScopeBuilder)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Command(t, ct, sb.build()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // command_target ::= LBRACKET fact RBRACKET 
            {
              Optional<Statement> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement f = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Optional.of(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_target",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // command_target ::= LBRACKET RBRACKET 
            {
              Optional<Statement> RESULT =null;
		 RESULT = Optional.empty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_target",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // command_type ::= RUN 
            {
              CommandType RESULT =null;
		 RESULT = CommandType.RUN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // command_type ::= CHECK 
            {
              CommandType RESULT =null;
		 RESULT = CommandType.CHECK; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // scope ::= NUMBER scope_type 
            {
              ScopeBuilder RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ScopeBuilder().set(t, i, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scope",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // scope ::= EXACTLY NUMBER scope_type 
            {
              ScopeBuilder RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ScopeBuilder().set(t, i, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scope",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // scope ::= NUMBER scope_type COMMA scope 
            {
              ScopeBuilder RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ScopeBuilder sb = (ScopeBuilder)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sb.set(t, i, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scope",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // scope ::= EXACTLY NUMBER scope_type COMMA scope 
            {
              ScopeBuilder RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ScopeBuilder sb = (ScopeBuilder)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sb.set(t, i, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scope",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // scope_type ::= IDENTITY 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scope_type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // scope_type ::= SYMMETRIC 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scope_type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // scope_type ::= ASYMMETRIC 
            {
              Integer RESULT =null;
		 RESULT = 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scope_type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
